import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
import time
import requests
import os

# Setup logging
log_file = "F:\\logs\\selenium_script.log"
os.makedirs(os.path.dirname(log_file), exist_ok=True)

logging.basicConfig(
    filename=log_file,
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger()

try:
    logger.info("Starting Selenium script")

    # Set browser download preferences
    edge_options = Options()
    edge_options.add_experimental_option("prefs", {
        "download.default_directory": "F:\\attachements",  # Change to your preferred download directory
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    })

    service = Service(
        executable_path="F:\\My Files\\My files\\!40-Apps\\msedgedriver.exe",
        service_args=["--verbose", "--log-path=F:\\logs\\webdriver.log"]
    )
    driver = webdriver.Edge(service=service, options=edge_options)

    # Navigate to login page
    login_url = "https://portal.swishfibre.com/Authenticate"
    driver.get(login_url)
    logger.info(f"Navigated to {login_url}")

    # Enter login credentials
    username = input("Enter your username/email: ").strip()
    password = input("Enter your password: ").strip()

    driver.find_element(By.ID, "Username").send_keys(username)
    driver.find_element(By.ID, "Password").send_keys(password)
    driver.find_element(By.CLASS_NAME, "btn-primary").click()
    logger.info("Logged in successfully")

    # Navigate to invoices page
    invoices_url = "https://portal.swishfibre.com/Invoices"
    driver.get(invoices_url)
    logger.info(f"Navigated to {invoices_url}")

    time.sleep(5)  # Wait for page to load

    all_invoice_links = []

    # Pagination logic
    while True:
        # Fetch invoice links on the current page
        invoice_links = driver.find_elements(By.CSS_SELECTOR, "a.download-link[href*='GetInvoicePdf']")
        logger.info(f"Found {len(invoice_links)} invoice links on current page")
        all_invoice_links.extend([link.get_attribute("href") for link in invoice_links])

        # Check if "Next" button is enabled
        next_button = driver.find_element(By.ID, "invoices_next")
        if "disabled" in next_button.get_attribute("class"):
            logger.info("No more pages to paginate")
            break

        # Click the "Next" button to go to the next page
        next_button.click()
        logger.info("Navigating to the next page")
        time.sleep(5)  # Allow time for the next page to load

    # Extract cookies from Selenium for use in requests
    cookies = {cookie['name']: cookie['value'] for cookie in driver.get_cookies()}
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36",
        "Referer": invoices_url,
    }

    download_folder = "F:\\attachements"
    os.makedirs(download_folder, exist_ok=True)

    # Loop through the collected invoice links to download
    failed_invoices = []
    for idx, invoice_url in enumerate(all_invoice_links):
        invoice_filename = f"invoice_{idx + 1}.pdf"
        logger.info(f"Attempting to download: {invoice_url}")

        # Attempt download using requests
        for attempt in range(3):
            try:
                response = requests.get(invoice_url, headers=headers, cookies=cookies, timeout=30)
                if response.status_code == 200:
                    with open(os.path.join(download_folder, invoice_filename), "wb") as file:
                        file.write(response.content)
                        logger.info(f"Downloaded {invoice_filename}")
                    break
                else:
                    logger.warning(f"Attempt {attempt + 1}: Failed to download {invoice_filename} - Status Code: {response.status_code}")
                    time.sleep(2 ** attempt)  # Exponential backoff
            except Exception as e:
                logger.exception(f"Error during download attempt {attempt + 1} for {invoice_filename}: {e}")
        else:
            logger.error(f"Failed to download {invoice_filename} after 3 attempts")
            failed_invoices.append(invoice_url)

    # Log any failed invoices
    if failed_invoices:
        logger.error(f"Failed invoices: {failed_invoices}")

except Exception as e:
    logger.exception("An error occurred during execution")

finally:
    try:
        driver.quit()
        logger.info("Browser closed successfully")
    except Exception as quit_error:
        logger.warning(f"Error while closing browser: {quit_error}")
